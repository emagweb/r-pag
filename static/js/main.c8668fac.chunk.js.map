{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","repo","setRepo","useEffect","a","axios","get","response","console","log","myRepo","data","getRepo","posts","id","name","currentPage","setCurrentPage","postsPerPage","indexOfLastPost","indexOfFirstPost","currentPosts","slice","currentPostsObject","paginate","number","style","width","textAlign","map","item","results","totalPosts","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRA6FeA,EAxFH,WAAO,IAAD,EAEQC,mBAAS,IAFjB,mBAETC,EAFS,KAEHC,EAFG,KAIhBC,qBAAU,YACK,uCAAG,8BAAAC,EAAA,+EAEWC,IAAMC,IAAI,sEAFrB,OAENC,EAFM,OAGZC,QAAQC,IAAIF,GACNG,EAASH,EAASI,KACxBT,EAAQQ,GALI,gDAOZF,QAAQC,IAAR,MAPY,yDAAH,qDAUbG,KACC,IAGH,IAAMC,EAAQ,CACZ,CAAEC,GAAI,IAAKC,KAAM,SACjB,CAAED,GAAI,IAAKC,KAAM,SACjB,CAAED,GAAI,IAAKC,KAAM,SACjB,CAAED,GAAI,IAAKC,KAAM,SACjB,CAAED,GAAI,IAAKC,KAAM,SACjB,CAAED,GAAI,IAAKC,KAAM,SACjB,CAAED,GAAI,IAAKC,KAAM,SACjB,CAAED,GAAI,IAAKC,KAAM,SACjB,CAAED,GAAI,IAAKC,KAAM,SACjB,CAAED,GAAI,KAAMC,KAAM,UAClB,CAAED,GAAI,KAAMC,KAAM,UAClB,CAAED,GAAI,KAAMC,KAAM,UAClB,CAAED,GAAI,KAAMC,KAAM,UAClB,CAAED,GAAI,KAAMC,KAAM,UAClB,CAAED,GAAI,KAAMC,KAAM,UAClB,CAAED,GAAI,KAAMC,KAAM,UAClB,CAAED,GAAI,KAAMC,KAAM,UAClB,CAAED,GAAI,KAAMC,KAAM,UAClB,CAAED,GAAI,KAAMC,KAAM,UAClB,CAAED,GAAI,KAAMC,KAAM,WAvCJ,EA0CsBf,mBAAS,GA1C/B,mBA0CTgB,EA1CS,KA0CIC,EA1CJ,OA2COjB,mBAAS,GAAzBkB,EA3CS,oBA+CVC,EAAkBH,EAAcE,EAChCE,EAAmBD,EAAkBD,EACrCG,EAAepB,EAAKqB,MAAMF,EAAkBD,GAE5CI,EAAqBV,EAAMS,MAAMF,EAAkBD,GAInDK,EAAW,SAACC,GAChBR,EAAeQ,IAGjB,OACE,qCACE,uBACA,gEACA,sBAAKC,MAAO,CAAEC,MAAO,QAASC,UAAW,UAAzC,UACGP,EAAaQ,KAAI,SAACC,GACjB,OAAO,4BAA0BA,EAAKC,QAAQjB,IAA/BgB,EAAKC,QAAQjB,OAE9B,cAAC,aAAD,CACEkB,WAAY/B,EAAKgC,OACjBf,aAAcA,EACdM,SAAUA,OAGd,uBACA,2DACA,sBAAKE,MAAO,CAAEC,MAAO,QAASC,UAAW,UAAzC,UACGL,EAAmBM,KAAI,SAACC,GACvB,OAAO,4BAAkBA,EAAKf,MAAfe,EAAKhB,OAEtB,cAAC,aAAD,CACEkB,WAAYnB,EAAMoB,OAClBf,aAAcA,EACdM,SAAUA,WC3ELU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c8668fac.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from 'axios'\n\nimport { Pagination } from \"react-custom-pagination\";\n\nconst App = () => {\n\n  const [repo, setRepo] = useState([])\n\n  useEffect(() => {\n    const getRepo = async() => {\n      try {\n        const response = await axios.get('https://backoffice.pogovorimo.com.ua/api/v1/applicant/?format=json')\n        console.log(response)\n        const myRepo = response.data\n        setRepo(myRepo)\n      } catch(error) {\n        console.log(error)\n      }\n    }\n    getRepo()\n  }, [])\n\n\n  const posts = [\n    { id: \"1\", name: \"user1\" },\n    { id: \"2\", name: \"user2\" },\n    { id: \"3\", name: \"user3\" },\n    { id: \"4\", name: \"user4\" },\n    { id: \"5\", name: \"user5\" },\n    { id: \"6\", name: \"user6\" },\n    { id: \"7\", name: \"user7\" },\n    { id: \"8\", name: \"user8\" },\n    { id: \"9\", name: \"user9\" },\n    { id: \"10\", name: \"user10\" },\n    { id: \"11\", name: \"user11\" },\n    { id: \"12\", name: \"user12\" },\n    { id: \"13\", name: \"user13\" },\n    { id: \"14\", name: \"user14\" },\n    { id: \"15\", name: \"user15\" },\n    { id: \"16\", name: \"user16\" },\n    { id: \"17\", name: \"user17\" },\n    { id: \"18\", name: \"user18\" },\n    { id: \"19\", name: \"user19\" },\n    { id: \"20\", name: \"user20\" },\n  ];\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(4);\n\n  //get current Posts\n\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = repo.slice(indexOfFirstPost, indexOfLastPost);\n\n  const currentPostsObject = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n  // when user clicks on number this function will execute\n\n  const paginate = (number) => {\n    setCurrentPage(number);\n  };\n\n  return (\n    <>\n      <br />\n      <h1>Pagination Example Not Working</h1>\n      <div style={{ width: \"300px\", textAlign: \"center\" }}>\n        {currentPosts.map((item) => {\n          return <p key={item.results.id}>{item.results.id}</p>;\n        })}\n        <Pagination\n          totalPosts={repo.length}\n          postsPerPage={postsPerPage}\n          paginate={paginate}\n        />\n      </div>\n      <br />\n      <h1>Pagination Example Workig</h1>\n      <div style={{ width: \"300px\", textAlign: \"center\" }}>\n        {currentPostsObject.map((item) => {\n          return <p key={item.id}>{item.name}</p>;\n        })}\n        <Pagination\n          totalPosts={posts.length}\n          postsPerPage={postsPerPage}\n          paginate={paginate}\n        />\n      </div>\n    </>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}